library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
library(shiny)
library(readxl)
library(janitor)
library(tidyverse)
library(readr)
library(scales)
 
#Todo list is in the UI


#----------------------------------Server---------------------------------
server = function(input, output, session){

  #Create the empty Df that will hold the input file
  values <- reactiveValues()
  
  #creates the df to hold the buyer file
  values$dfglobalb <- data.frame()
  
  #creates the df to hold the seller file
  values$dfglobals <- data.frame()
  
  #creates the df that will hold both files together
  values$dfglobal <- data.frame()
  
  #Create an event that will listen for the confirm button.
  #This will create the global DF for manipulation for other DFs
  newEntry <- observeEvent(input$confirm, {
    
    #Bind the buyers temp table
    values$dfglobalb <- rbind(values$dfglobalb,entireTableb())
    
    #Bind the sellers temp table
    values$dfglobals <- rbind(values$dfglobals,entireTables())
    
    #Bind the global temp table
    values$dfglobal <- rbind(values$dfglobalb,values$dfglobals)
    
    #Convert into Date format
    #values$dfglobal$close <- as.Date(values$dfglobal$close, "%m/%d/%Y")
    
    #Order the DF
    values$dfglobal <- values$dfglobal[order(values$dfglobal$close, values$dfglobal$lhi_agent),]
    
    
    
  })
  
  
  #Create the preview table for the createtable call
  #Buyer table
  previewTableb <- reactive({
    req(input$file1)
    
    inFile <- input$file1
    skipNum <- as.numeric(input$skipInput)
    prevnum <- as.numeric(input$PreviewRows)
    
    head(read_csv(inFile$datapath,col_names = FALSE,
                    skip = skipNum),prevnum)
  })
  
  #Create the preview table for the createtable call
  #Seller table
  previewTables <- reactive({
    req(input$file2)
    
    inFile <- input$file2
    skipNum <- as.numeric(input$skipInput)
    prevnum <- as.numeric(input$PreviewRows)
    
    head(read_csv(inFile2$datapath,col_names = FALSE,
                    skip = skipNum),prevnum)
  })
  
  #Function that creates the Df from the input file - buyer table
  entireTableb <- reactive({
    req(input$file1)
    
    inFile <- input$file1
    skipNum <- as.numeric(input$skipInput)
    prevnum <- as.numeric(input$PreviewRows)
    
    
    dfb <- read_csv(inFile$datapath, col_names = FALSE,skip = skipNum)
    
    #Convert to Date
    dfb$X1 <- as.Date(dfb$X1, format = "%m/%d/%Y")
    
    #Create Df names
    names(dfb) <- c("close","address","street","price","seller_company", "seller_agent"
                     ,"buyer_agent","buyer_company","x9","x10")
    
    #Create the DF with only the needed information
     buyerlist <- data.frame()
    (for(i in 1:nrow(dfb)){
      if(strcmp(dfb$buyer_company[i],dfb$seller_company[i])){
        buyerlist[i,1] <- c("Dual")
      } else{
        buyerlist[i,1] <- c("")
      }
    })

    #Create DF for needed columns 
    buyer <- data.frame(stringsAsFactors = FALSE,
                        close = as.factor((dfb$close)),
                        month = substr(dfb$close, 6, 7),
                        address = (dfb$address),
                        street = (dfb$street),
                        side = c("Buyer"),
                        lhi_agent = (dfb$buyer_agent),
                        company = (dfb$buyer_company),
                        price = (dfb$price)
                        ,notes = buyerlist
    )
    
    buyer
    
  })
  
  #Function that creates the Df from the input file - Seller table
  entireTables <- reactive({
    req(input$file2)
    
    inFile <- input$file2
    skipNum <- as.numeric(input$skipInput)
    prevnum <- as.numeric(input$PreviewRows)
    
    
    dfs <- read_csv(inFile$datapath, col_names = FALSE,skip = skipNum)
    #Convert to Date
    dfs$X1 <- as.Date(dfs$X1, format = "%m/%d/%Y")
   
    names(dfs) <- c("close","address","street","price","seller_company", "seller_agent"
                    ,"buyer_agent","buyer_company","x9","x10")
    
    #Find out if this is a dual sale
    sellerlist <- data.frame()
    (for(i in 1:nrow(dfs)){
      if(strcmp(dfs$buyer_company[i],dfs$seller_company[i])){
        sellerlist[i,1] <- c("Dual")
      } else{
        sellerlist[i,1] <- c("")
      }
    })
    
    #Create the DF with the needed information
    seller <- data.frame(stringsAsFactors = FALSE,
                         close = as.factor((dfs$close)),
                         month = substr(dfs$close, 6, 7),
                         address = (dfs$address),
                         street = (dfs$street),
                         side = c("Seller"),
                         lhi_agent = (dfs$seller_agent),
                         company = (dfs$seller_company),
                         price = (dfs$price)
                         ,notes = sellerlist
                         )

    seller
    
  })
  
  #Create the DF that summarizes the agent sales by dollar of sales  
  dollarsales <- reactive({
    
    df1 <- values$dfglobal %>%
      group_by(lhi_agent, side) %>%
      summarize(Total = sum(price))
    
    df1
    
  })
  
  #Create the DF that summarizes the agent sales by number of sales  
  numberofsales <- reactive({
    
    df2 <- values$dfglobal %>%
      group_by(lhi_agent) %>%
      summarize(Total = n())
    df2
    
  })
  
  #Create the Df that summarizes the agent sales by the side they are on
  sidesales <- reactive({
    
    df3 <- values$dfglobal %>%
      group_by(side) %>%
      summarize(Total = n())
    df3
    
  })
  
  #Create the DF the summarizes the agent sales by the month
  monthsales <- reactive ({
    
    df4 <- values$dfglobal %>%
      group_by(month) %>%
      summarize(Total = n())
    df4
      
  })
  
  #Create the DF the summarizes the agent sales by the month
  monthdollars <- reactive ({
    
    df5 <- values$dfglobal %>%
      group_by(month) %>%
      summarize(Total = sum(price))
    df5
    
  })
  
  #This helps to display part of the file
  output$contents <- renderTable({
    previewTableb()
  })
  
  #This will display the entire file
  #----------------------------------------------Only needed for testing purposes-----------------
  # But check with Patrick if he wants to see this or have it hidden
  output$contents1 <- renderTable({

    values$dfglobal

  })
  #^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^Only needed for testing purpose^^^^^^^^^^^^^^^^^^^^
  
  
  
  #This plots the total dollars of sales by agent
  output$summary <- renderPlotly({
    
    ggplotly(
    ggplot(dollarsales(), aes(x = reorder(lhi_agent, Total), y = Total, fill = side))+geom_bar(stat="identity", position = "stack")+
      ggtitle("Yearly Sales") + labs(x = "Agent Names", y = "Total Sales") + coord_flip()
    )
    #https://ggplot2.tidyverse.org/reference/labs.html
    
  })
  
  #This plots the Number of sales by Agent
  output$summaryCount <- renderPlot({
    
    ggplot(numberofsales(), aes(x = reorder(lhi_agent, Total), y = Total))+geom_bar(stat="identity", fill="steelblue")+
      ggtitle("Yearly Sales") + labs(x = "Agent Names", y = "Total Sales") + coord_flip()
    
  })
  
  #This plots the number of sales by side
  output$summaryside <- renderPlot({
    
    ggplot(sidesales(), aes(x = side, y = Total))+geom_bar(stat="identity", fill="steelblue")+
      ggtitle("Yearly Sales") + labs(x = "Agent Names", y = "Total Sales")
    
  })
  
  #This plots the number of sales by month
  output$summarymonth <- renderPlotly({
    
    ggplotly(
    ggplot(monthsales(), aes(x = month, y = Total))+geom_bar(stat="identity", fill="steelblue")+
      ggtitle("Sales by Month") + labs(x = "Month", y = "Sales Volume")
    )
  })
  
  #This plots the dollar of sales by month
  output$summarydollarmonths<- renderPlotly({
    
    ggplotly(
    ggplot(monthdollars(), aes(x = month, y = Total))+geom_bar(stat="identity", fill="steelblue")+
      ggtitle("Sales by Month") + labs(x = "Month", y = "Sales in Dollars ($1,000s)")+
      scale_y_continuous(name="Sales in Dollars", labels = comma)
    )
  })
}
# Run the application 
#shinyApp(ui = ui, server = server)
